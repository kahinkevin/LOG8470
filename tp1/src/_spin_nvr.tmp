never p0 {    /* !(<> ((nr_leaders>2))) */
accept_init:
T0_init:
	do
	:: (! (((nr_leaders>2)))) -> goto T0_init
	od;
}
never p1 {    /* !(<> ([] ((nr_leaders==1)))) */
T0_init:
	do
	:: (! (((nr_leaders==1)))) -> goto accept_S9
	:: (1) -> goto T0_init
	od;
accept_S9:
	do
	:: (1) -> goto T0_init
	od;
}
never p2 {    /* !([] (((nr_leaders==0)) U ((nr_leaders==1)))) */
T0_init:
	do
	:: (! (((nr_leaders==1)))) -> goto accept_S4
	:: atomic { (! (((nr_leaders==0))) && ! (((nr_leaders==1)))) -> assert(!(! (((nr_leaders==0))) && ! (((nr_leaders==1))))) }
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! (((nr_leaders==1)))) -> goto accept_S4
	:: atomic { (! (((nr_leaders==0))) && ! (((nr_leaders==1)))) -> assert(!(! (((nr_leaders==0))) && ! (((nr_leaders==1))))) }
	od;
accept_all:
	skip
}
never p3 {    /* !(! ([] ((nr_leaders==0)))) */
accept_init:
T0_init:
	do
	:: (((nr_leaders==0))) -> goto T0_init
	od;
}
