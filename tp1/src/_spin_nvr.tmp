never regleA {    /* !([] ((! (actif[0])) || (! (actif[1])))) */
T0_init:
	do
	:: atomic { (! (((! (actif[0])) || (! (actif[1]))))) -> assert(!(! (((! (actif[0])) || (! (actif[1])))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never regleB1 {    /* !([] ((<> (actif[0])) || (panne[1]))) */
T0_init:
	do
	:: (! ((actif[0])) && ! ((panne[1]))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! ((actif[0]))) -> goto accept_S4
	od;
}
never regleB2 {    /* !([] ((<> (actif[1])) || (panne[0]))) */
T0_init:
	do
	:: (! ((actif[1])) && ! ((panne[0]))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! ((actif[1]))) -> goto accept_S4
	od;
}
never regleC {    /* !((! (panne[1])) || ([] ((<> (actif[0])) || (panne[0])))) */
T0_init:
	do
	:: (! ((! (panne[1]))) && ! ((actif[0])) && ! ((panne[0]))) -> goto accept_S9
	:: (! ((! (panne[1])))) -> goto T0_S8
	od;
accept_S9:
	do
	:: (! ((actif[0]))) -> goto accept_S9
	od;
T0_S8:
	do
	:: (! ((actif[0])) && ! ((panne[0]))) -> goto accept_S9
	:: (1) -> goto T0_S8
	od;
}
